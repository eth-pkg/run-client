# Enable syncing from genesis, which is generally insecure and incompatible with data availability checks.
#  Checkpoint syncing is the preferred method for syncing a node. Only use this flag when testing. DO NOT use on mainnet!
LIGHTHOUSE_CLI_BN_ALLOW_INSECURE_GENESIS_SYNC=

# This flag is deprecated and has no effect.
LIGHTHOUSE_CLI_BN_ALWAYS_PREFER_BUILDER_PAYLOAD=

# Send payload attributes with every fork choice update. 
# This is intended for use by block builders, relays, and developers. 
# You should set a fee recipient on this BN and also consider adjusting the --prepare-payload-lookahead flag.
LIGHTHOUSE_CLI_BN_ALWAYS_PREPARE_PAYLOAD=

# This flag disables all checks related to chain health. 
# This means the builder API will always be used for payload construction, regardless of recent chain conditions.
LIGHTHOUSE_CLI_BN_BUILDER_FALLBACK_DISABLE_CHECKS=

# If present, apply compaction to the database on start-up. 
# Use with caution. It is generally not recommended unless auto-compaction is disabled.
LIGHTHOUSE_CLI_BN_COMPACT_DB=

# Disable the backfill sync rate-limiting. 
# This allow users to just sync the entire chain as fast as possible, 
# however it can result in resource contention which degrades staking performance. 
# Stakers should generally choose to avoid this flag since backfill sync is not required for staking.
LIGHTHOUSE_CLI_BN_DISABLE_BACKFILL_RATE_LIMITING=

# Explicitly disables syncing of deposit logs from the execution node. 
# This overrides any previous option that depends on it. Useful if you intend to run a non-validating beacon node.
LIGHTHOUSE_CLI_BN_DISABLE_DEPOSIT_CONTRACT_SYNC=

# This flag is deprecated and has no effect.
LIGHTHOUSE_CLI_BN_DISABLE_DUPLICATE_WARN_LOGS=

# Discovery automatically updates the nodes local ENR with an external IP address and port as seen by other peers on the network. 
# This disables this feature, fixing the ENR's IP/PORT to those specified on boot.
LIGHTHOUSE_CLI_BN_DISABLE_ENR_AUTO_UPDATE=

# Disable the timeouts applied to some internal locks by default. 
# This can lead to less spurious failures on slow hardware but is considered experimental as it may obscure performance issues.
LIGHTHOUSE_CLI_BN_DISABLE_LOCK_TIMEOUTS=

# If present, do not include timestamps in logging output.
LIGHTHOUSE_CLI_BN_DISABLE_LOG_TIMESTAMP=

# If present, do not configure the system allocator. 
# Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.
LIGHTHOUSE_CLI_BN_DISABLE_MALLOC_TUNING=

# Force Lighthouse to verify every execution block hash with the execution client during finalized sync.
# By default block hashes will be checked in Lighthouse and only passed to the EL if initial verification fails.
LIGHTHOUSE_CLI_BN_DISABLE_OPTIMISTIC_FINALIZED_SYNC=

# Disables the discovery packet filter. Useful for testing in smaller networks.
LIGHTHOUSE_CLI_BN_DISABLE_PACKET_FILTER=

# Do not attempt to reorg late blocks from other validators when proposing.
LIGHTHOUSE_CLI_BN_DISABLE_PROPOSER_REORGS=

# Disables the quic transport. The node will rely solely on the TCP transport for libp2p connections.
LIGHTHOUSE_CLI_BN_DISABLE_QUIC=

# Disables UPnP support. Setting this will prevent Lighthouse from attempting to automatically establish external port mappings.
LIGHTHOUSE_CLI_BN_DISABLE_UPNP=

# If present, uses an eth1 backend that generates static dummy data. Identical to the method used at the 2019 Canada interop.
LIGHTHOUSE_CLI_BN_DUMMY_ETH1=

# Lighthouse by default does not discover private IP addresses. Set this flag to enable connection attempts to local addresses.
LIGHTHOUSE_CLI_BN_ENABLE_PRIVATE_DISCOVERY=

# Sets the local ENR IP address and port to match those set for lighthouse.
# Specifically, the IP address will be the value of --listen-address and the UDP port will be --discovery-port.
LIGHTHOUSE_CLI_BN_ENR_MATCH=

# If present the node will connect to an eth1 node. This is required for block production, you must use this flag if you wish to serve a validator.
LIGHTHOUSE_CLI_BN_ETH1=

# Purges the eth1 block and deposit caches.
LIGHTHOUSE_CLI_BN_ETH1_PURGE_CACHE=

# Attempts to download blocks all the way back to genesis when checkpoint syncing.
LIGHTHOUSE_CLI_BN_GENESIS_BACKFILL=

# Enable the graphical user interface and all its requirements. 
# This enables --http and --validator-monitor-auto and enables SSE logging.
LIGHTHOUSE_CLI_BN_GUI=

# Enable the RESTful HTTP API server. Disabled by default.
LIGHTHOUSE_CLI_BN_HTTP=

# Forces the HTTP to indicate that the node is synced when sync is actually stalled. 
# This is useful for very small testnets. TESTING ONLY. DO NOT USE ON MAINNET.
LIGHTHOUSE_CLI_BN_HTTP_ALLOW_SYNC_STALLED=

# Serves the RESTful HTTP API server over TLS. This feature is currently experimental.
LIGHTHOUSE_CLI_BN_HTTP_ENABLE_TLS=

# Import and aggregate all attestations, regardless of validator subscriptions. 
# This will only import attestations from already-subscribed subnets, 
# use with --subscribe-all-subnets to ensure all attestations are received for import.
LIGHTHOUSE_CLI_BN_IMPORT_ALL_ATTESTATIONS=

# Act as a full node supporting light clients on the p2p network [experimental].
LIGHTHOUSE_CLI_BN_LIGHT_CLIENT_SERVER=

# Force outputting colors when emitting logs to the terminal.
LIGHTHOUSE_CLI_BN_LOG_COLOR=

# If present, compress old log files. This can help reduce the space needed to store old logs.
LIGHTHOUSE_CLI_BN_LOGFILE_COMPRESS=

# If present, log files will be generated as world-readable meaning they can be read by any user on the machine. 
# Note that logs can often contain sensitive information about your validator and so this flag should be used with caution. 
# For Windows users, the log file permissions will be inherited from the parent folder.
LIGHTHOUSE_CLI_BN_LOGFILE_NO_RESTRICTED_PERMS=

# Enable the Prometheus metrics HTTP server. Disabled by default.
LIGHTHOUSE_CLI_BN_METRICS=

# Prevents sending various client identification information.
LIGHTHOUSE_CLI_BN_PRIVATE=

# Sets this beacon node at be a block proposer only node. 
# This will run the beacon node in a minimal configuration that is sufficient for block publishing only.
# This flag should be used for a beacon node being referenced by validator client using the --proposer-node flag. 
# This configuration is for enabling more secure setups.
LIGHTHOUSE_CLI_BN_PROPOSER_ONLY=

# If present, the chain database will be deleted. Use with caution.
LIGHTHOUSE_CLI_BN_PURGE_DB=

# After a checkpoint sync, reconstruct historic states in the database. 
# This requires syncing all the way back to genesis.
LIGHTHOUSE_CLI_BN_RECONSTRUCT_HISTORIC_STATES=

# When present, Lighthouse will forget the payload statuses of any already-imported blocks.
# This can assist in the recovery from a consensus failure caused by the execution layer.
LIGHTHOUSE_CLI_BN_RESET_PAYLOAD_STATUSES=

# Shutdown beacon node as soon as sync is completed. Backfill sync will not be performed before shutdown.
LIGHTHOUSE_CLI_BN_SHUTDOWN_AFTER_SYNC=

# Run a slasher alongside the beacon node. 
# It is currently only recommended for expert users because of the immaturity of the slasher UX and the extra resources required.
LIGHTHOUSE_CLI_BN_SLASHER=

# Standard option for a staking beacon node. 
# This will enable the HTTP server on localhost:5052 and import deposit logs from the execution node.
# This is equivalent to `--http` on merge-ready networks, or `--http --eth1` pre-merge.
LIGHTHOUSE_CLI_BN_STAKING=

# Subscribe to all subnets regardless of validator count. 
# This will also advertise the beacon node as being long-lived subscribed to all subnets.
LIGHTHOUSE_CLI_BN_SUBSCRIBE_ALL_SUBNETS=

# Enables the automatic detection and monitoring of validators connected to the HTTP API and using the subnet subscription endpoint. 
# This generally has the effect of providing additional logging and metrics for locally controlled validators.
LIGHTHOUSE_CLI_BN_VALIDATOR_MONITOR_AUTO=

# Prints version information.
LIGHTHOUSE_CLI_BN_VERSION=

# Sets all listening TCP/UDP ports to 0, allowing the OS to choose some arbitrary free ports.
LIGHTHOUSE_CLI_BN_ZERO_PORTS=

# Enable or disable automatic compaction of the database on finalization. [default: true]
LIGHTHOUSE_CLI_BN_AUTO_COMPACT_DB=

# The margin for blob pruning in epochs. The oldest blobs are pruned up until data_availability_boundary 
# - blob_prune_margin_epochs. [default: 0]
LIGHTHOUSE_CLI_BN_BLOB_PRUNE_MARGIN_EPOCHS=

# Data directory for the blobs database.
LIGHTHOUSE_CLI_BN_BLOBS_DIR=

# Specifies how many blocks the database should cache in memory. [default: 5]
LIGHTHOUSE_CLI_BN_BLOCK_CACHE_SIZE=

# One or more comma-delimited base64-encoded ENRs to bootstrap the p2p network. Multiaddr is also supported.
LIGHTHOUSE_CLI_BN_BOOT_NODES=

# The URL of a service compatible with the MEV-boost API.
LIGHTHOUSE_CLI_BN_BUILDER=

# If this node is proposing a block and the chain has not finalized within this number of epochs, 
# it will NOT query any connected builders, and will use the local execution engine for payload construction. 
# Setting this value to anything less than 2 will cause the node to NEVER query connected builders. 
# Setting it to 2 will cause this condition to be hit if there are skips slots at the start of an epoch, 
# right before this node is set to propose. [default: 3]
LIGHTHOUSE_CLI_BN_BUILDER_FALLBACK_EPOCHS_SINCE_FINALIZATION=

# If this node is proposing a block and has seen this number of skip slots on the canonical chain in a row, 
# it will NOT query any connected builders, and will use the local execution engine for payload construction. [default: 3]
LIGHTHOUSE_CLI_BN_BUILDER_FALLBACK_SKIPS=

# If this node is proposing a block and has seen this number of skip slots on the canonical chain in the past `SLOTS_PER_EPOCH`,
# it will NOT query any connected builders, and will use the local execution engine for payload construction. [default: 8]
LIGHTHOUSE_CLI_BN_BUILDER_FALLBACK_SKIPS_PER_EPOCH=

# This flag is deprecated and has no effect.
LIGHTHOUSE_CLI_BN_BUILDER_PROFIT_THRESHOLD=

# The HTTP user agent to send alongside requests to the builder URL. The default is Lighthouse's version string.
LIGHTHOUSE_CLI_BN_BUILDER_USER_AGENT=

# Set the checkpoint blobs to start syncing from. Must be aligned and match --checkpoint-block. 
# Using --checkpoint-sync-url instead is recommended.
LIGHTHOUSE_CLI_BN_CHECKPOINT_BLOBS=

# Set a checkpoint block to start syncing from. Must be aligned and match --checkpoint-state. 
# Using --checkpoint-sync-url instead is recommended.
LIGHTHOUSE_CLI_BN_CHECKPOINT_BLOCK=

# Set a checkpoint state to start syncing from. Must be aligned and match --checkpoint-block. 
# Using --checkpoint-sync-url instead is recommended.
LIGHTHOUSE_CLI_BN_CHECKPOINT_STATE=

# Set the remote beacon node HTTP endpoint to use for checkpoint sync.
LIGHTHOUSE_CLI_BN_CHECKPOINT_SYNC_URL=

# Set the timeout for checkpoint sync calls to remote beacon node HTTP endpoint. [default: 180]
LIGHTHOUSE_CLI_BN_CHECKPOINT_SYNC_URL_TIMEOUT=

# Used to specify a custom root data directory for lighthouse keys and databases. 
# Defaults to $HOME/.lighthouse/{network} where network is the value of the `network` flag. 
# Note: Users should specify separate custom datadirs for different networks.
LIGHTHOUSE_CLI_BN_DATADIR=

# Specifies the verbosity level used when emitting logs to the terminal. 
# [default: info] [possible values: info, debug, trace, warn, error, crit]
LIGHTHOUSE_CLI_BN_DEBUG_LEVEL=

# The UDP port that discovery will listen on. Defaults to `port`.
LIGHTHOUSE_CLI_BN_DISCOVERY_PORT=

# The UDP port that discovery will listen on over IPv6 if listening over both IPv4 and IPv6. Defaults to `port6`.
LIGHTHOUSE_CLI_BN_DISCOVERY_PORT6=

# The IP address/ DNS address to broadcast to other peers on how to reach this node. 
# If a DNS address is provided, the enr-address is set to the IP address it resolves to 
# and does not auto-update based on PONG responses in discovery. 
# Set this only if you are sure other nodes can connect to your local node on this address. 
# This will update the `ip4` or `ip6` ENR fields accordingly. To update both, set this flag twice with the different values.
LIGHTHOUSE_CLI_BN_ENR_ADDRESS=

# The quic UDP4 port that will be set on the local ENR. 
# Set this only if you are sure other nodes can connect to your local node on this port over IPv4.
LIGHTHOUSE_CLI_BN_ENR_QUIC_PORT=

# The quic UDP6 port that will be set on the local ENR. 
# Set this only if you are sure other nodes can connect to your local node on this port over IPv6.
LIGHTHOUSE_CLI_BN_ENR_QUIC6_PORT=

# The TCP4 port of the local ENR. 
# Set this only if you are sure other nodes can connect to your local node on this port over IPv4. 
# The --port flag is used if this is not set.
LIGHTHOUSE_CLI_BN_ENR_TCP_PORT=

# The TCP6 port of the local ENR. 
# Set this only if you are sure other nodes can connect to your local node on this port over IPv6. 
# The --port6 flag is used if this is not set.
LIGHTHOUSE_CLI_BN_ENR_TCP6_PORT=

# The UDP4 port of the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv4.
LIGHTHOUSE_CLI_BN_ENR_UDP_PORT=

# The UDP6 port of the local ENR. Set this only if you are sure other nodes can connect to your local node on this port over IPv6.
LIGHTHOUSE_CLI_BN_ENR_UDP6_PORT=

# The epoch interval with which to prune blobs from Lighthouse's database 
# when they are older than the data availability boundary relative to the current epoch. [default: 1]
LIGHTHOUSE_CLI_BN_EPOCHS_PER_BLOB_PRUNE=

# The number of epochs to wait between running the migration of data from the hot DB to the cold DB.
# Less frequent runs can be useful for minimizing disk writes. [default: 1]
LIGHTHOUSE_CLI_BN_EPOCHS_PER_MIGRATION=

# Specifies the number of blocks that a deposit log query should span. 
# This will reduce the size of responses from the Eth1 endpoint. [default: 1000]
LIGHTHOUSE_CLI_BN_ETH1_BLOCKS_PER_LOG_QUERY=

# Specifies the distance between the Eth1 chain head and the last block which should be imported into the cache. 
# Setting this value lower can help compensate for irregular Proof-of-Work block times, 
# but setting it too low can make the node vulnerable to re-orgs.
LIGHTHOUSE_CLI_BN_ETH1_CACHE_FOLLOW_DISTANCE=

# Server endpoint for an execution layer JWT-authenticated HTTP JSON-RPC connection. 
# Uses the same endpoint to populate the deposit cache.
LIGHTHOUSE_CLI_BN_EXECUTION_ENDPOINT=

# File path which contains the hex-encoded JWT secret for the execution endpoint provided in the --execution-endpoint flag.
LIGHTHOUSE_CLI_BN_EXECUTION_JWT=

# Used by the beacon node to communicate a unique identifier to execution nodes during JWT authentication. 
# It corresponds to the 'id' field in the JWT claims object. Set to empty by default.
LIGHTHOUSE_CLI_BN_EXECUTION_JWT_ID=

# Hex-encoded JWT secret for the execution endpoint provided in the --execution-endpoint flag.
LIGHTHOUSE_CLI_BN_EXECUTION_JWT_SECRET_KEY=

# Used by the beacon node to communicate a client version to execution nodes during JWT authentication. 
# It corresponds to the 'clv' field in the JWT claims object. Set to empty by default.
LIGHTHOUSE_CLI_BN_EXECUTION_JWT_VERSION=

# Unsigned integer to multiply the default execution timeouts by. [default: 1]
LIGHTHOUSE_CLI_BN_EXECUTION_TIMEOUT_MULTIPLIER=

# Set the maximum number of milliseconds to wait for fork choice before proposing a block. 
# You can prevent waiting at all by setting the timeout to 0, however you risk proposing atop the wrong parent block. [default: 250]
LIGHTHOUSE_CLI_BN_FORK_CHOICE_BEFORE_PROPOSAL_TIMEOUT=

# Data directory for the freezer database.
LIGHTHOUSE_CLI_BN_FREEZER_DIR=

# A URL of a beacon-API compatible server from which to download the genesis state. 
# Checkpoint sync server URLs can generally be used with this flag. 
# If not supplied, a default URL or the --checkpoint-sync-url may be used. If the genesis state is already included in this binary then this value will be ignored.
LIGHTHOUSE_CLI_BN_GENESIS_STATE_URL=

# The timeout in seconds for the request to --genesis-state-url. [default: 180]
LIGHTHOUSE_CLI_BN_GENESIS_STATE_URL_TIMEOUT=

# Specify your custom graffiti to be included in blocks. 
# Defaults to the current version and commit, truncated to fit in 32 bytes.
LIGHTHOUSE_CLI_BN_GRAFFITI=

# Specifies how many states from the freezer database should cache in memory. [default: 1]
LIGHTHOUSE_CLI_BN_HISTORIC_STATE_CACHE_SIZE=

# Set the listen address for the RESTful HTTP API server.
LIGHTHOUSE_CLI_BN_HTTP_ADDRESS=

# Set the value of the Access-Control-Allow-Origin response HTTP header. 
# Use * to allow any origin (not recommended in production). 
# If no value is supplied, the CORS allowed origin is set to the listen address of this server (e.g., http://localhost:5052).
LIGHTHOUSE_CLI_BN_HTTP_ALLOW_ORIGIN=

# Status code to send when a block that is already known is POSTed to the HTTP API.
LIGHTHOUSE_CLI_BN_HTTP_DUPLICATE_BLOCK_STATUS=

# The beacon processor is a scheduler which provides quality-of-service and DoS protection. 
# When set to "true", HTTP API requests will be queued and scheduled alongside other tasks. When set to "false", HTTP API responses will be executed immediately.
LIGHTHOUSE_CLI_BN_HTTP_ENABLE_BEACON_PROCESSOR=

# Set the listen TCP port for the RESTful HTTP API server.
LIGHTHOUSE_CLI_BN_HTTP_PORT=

# Serve the spec for a specific hard fork on /eth/v1/config/spec. 
# It should not be necessary to set this flag.
LIGHTHOUSE_CLI_BN_HTTP_SPEC_FORK=

# Multiplier to apply to the length of HTTP server-sent-event (SSE) channels. 
# Increasing this value can prevent messages from being dropped.
LIGHTHOUSE_CLI_BN_HTTP_SSE_CAPACITY_MULTIPLIER=

# The path of the certificate to be used when serving the HTTP API server over TLS.
LIGHTHOUSE_CLI_BN_HTTP_TLS_CERT=

# The path of the private key to be used when serving the HTTP API server over TLS. Must not be password-protected.
LIGHTHOUSE_CLI_BN_HTTP_TLS_KEY=

# If a block succeeds gossip validation whilst failing full validation, store the block SSZ as a file at this path. 
# This feature is only recommended for developers. 
# This directory is not pruned, users should be careful to avoid filling up their disks.
LIGHTHOUSE_CLI_BN_INVALID_GOSSIP_VERIFIED_BLOCKS_PATH=

# One or more comma-delimited multiaddrs to manually connect to a libp2p peer without an ENR.
LIGHTHOUSE_CLI_BN_LIBP2P_ADDRESSES=

# The address lighthouse will listen for UDP and TCP connections.
# To listen over IPv4 and IPv6 set this flag twice with the different values. 
# Examples: --listen-address '0.0.0.0' will listen over IPv4. --listen-address '::' will listen over IPv6. 
# --listen-address '0.0.0.0' --listen-address '::' will listen over both IPv4 and IPv6. 
# The order of the given addresses is not relevant. However, multiple IPv4, or multiple IPv6 addresses will not be accepted. [default: 0.0.0.0]
LIGHTHOUSE_CLI_BN_LISTEN_ADDRESS=

# Specifies the log format used when emitting logs to the terminal. [possible values: JSON]
LIGHTHOUSE_CLI_BN_LOG_FORMAT=

# File path where the log file will be stored. 
# Once it grows to the value specified in --logfile-max-size a new log file is generated where future logs are stored. 
# Once the number of log files exceeds the value specified in --logfile-max-number the oldest log file will be overwritten.
LIGHTHOUSE_CLI_BN_LOGFILE=

# The verbosity level used when emitting logs to the log file. [default: debug] [possible values: info, debug, trace, warn, error, crit]
LIGHTHOUSE_CLI_BN_LOGFILE_DEBUG_LEVEL=

# Specifies the log format used when emitting logs to the logfile. [possible values: DEFAULT, JSON]
LIGHTHOUSE_CLI_BN_LOGFILE_FORMAT=

# The maximum number of log files that will be stored. If set to 0, background file logging is disabled. [default: 5]
LIGHTHOUSE_CLI_BN_LOGFILE_MAX_NUMBER=

# The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled. [default: 200]
LIGHTHOUSE_CLI_BN_LOGFILE_MAX_SIZE=

# Refuse to skip more than this many slots when processing an attestation. 
# This prevents nodes on minority forks from wasting our time and disk space, but could also cause unnecessary consensus failures, so is disabled by default.
LIGHTHOUSE_CLI_BN_MAX_SKIP_SLOTS=

# Set the listen address for the Prometheus metrics HTTP server.
LIGHTHOUSE_CLI_BN_METRICS_ADDRESS=

# Set the value of the Access-Control-Allow-Origin response HTTP header. 
# Use * to allow any origin (not recommended in production). 
# If no value is supplied, the CORS allowed origin is set to the listen address of this server (e.g., http://localhost:5054).
LIGHTHOUSE_CLI_BN_METRICS_ALLOW_ORIGIN=

# Set the listen TCP port for the Prometheus metrics HTTP server.
LIGHTHOUSE_CLI_BN_METRICS_PORT=

# Enables the monitoring service for sending system metrics to a remote endpoint. 
# This can be used to monitor your setup on certain services (e.g., beaconcha.in). 
# This flag sets the endpoint where the beacon node metrics will be sent. Note: 
# This will send information to a remote server which may identify and associate your validators, IP address, and other personal information. 
# Always use an HTTPS connection and never provide an untrusted URL.
LIGHTHOUSE_CLI_BN_MONITORING_ENDPOINT=

# Defines how many seconds to wait between each message sent to the monitoring-endpoint. Default: 60s
LIGHTHOUSE_CLI_BN_MONITORING_ENDPOINT_PERIOD=

# Name of the Eth2 chain Lighthouse will sync and follow. [possible values: mainnet, prater, goerli, gnosis, chiado, sepolia, holesky]
LIGHTHOUSE_CLI_BN_NETWORK=

# Data directory for network keys. Defaults to network/ inside the beacon node dir.
LIGHTHOUSE_CLI_BN_NETWORK_DIR=

# The TCP/UDP ports to listen on. There are two UDP ports. 
# The discovery UDP port will be set to this value and the Quic UDP port will be set to this value + 1. 
# The discovery port can be modified by the --discovery-port flag and the quic port can be modified by the --quic-port flag. 
# If listening over both IPv4 and IPv6 the --port flag will apply to the IPv4 address and --port6 to the IPv6 address. [default: 9000]
LIGHTHOUSE_CLI_BN_PORT=

# The TCP/UDP ports to listen on over IPv6 when listening over both IPv4 and IPv6. Defaults to 9090 when required. 
# The Quic UDP port will be set to this value + 1. [default: 9090]
LIGHTHOUSE_CLI_BN_PORT6=

# The time before the start of a proposal slot at which payload attributes should be sent. 
# Low values are useful for execution nodes which don't improve their payload after the first call, and high values are useful for ensuring the EL is given ample notice. Default: 1/3 of a slot.
LIGHTHOUSE_CLI_BN_PREPARE_PAYLOAD_LOOKAHEAD=

# Control the progressive balances cache mode. 
# The default `fast` mode uses the cache to speed up fork choice. A more conservative `checked` mode compares the cache's results against results without the cache. 
# If there is a mismatch, it falls back to the cache-free result. Using the default `fast` mode is recommended unless advised otherwise by the Lighthouse team. 
# [possible values: disabled, checked, strict, fast]
LIGHTHOUSE_CLI_BN_PROGRESSIVE_BALANCES_MODE=

# Maximum delay after the start of the slot at which to propose a reorging block. 
# Lower values can prevent failed reorgs by ensuring the block has ample time to propagate and be processed by the network. 
# The default is 1/12th of a slot (1 second on mainnet).
LIGHTHOUSE_CLI_BN_PROPOSER_REORG_CUTOFF=

# Comma-separated list of integer offsets which can be used to avoid proposing reorging blocks at certain slots. 
# An offset of N means that reorging proposals will not be attempted at any slot such that `slot % SLOTS_PER_EPOCH == N`.
# By default only re-orgs at offset 0 will be avoided. Any offsets supplied with this flag will impose additional restrictions.
LIGHTHOUSE_CLI_BN_PROPOSER_REORG_DISALLOWED_OFFSETS=

# Maximum number of epochs since finalization at which proposer reorgs are allowed. Default: 2
LIGHTHOUSE_CLI_BN_PROPOSER_REORG_EPOCHS_SINCE_FINALIZATION=

# Percentage of vote weight below which to attempt a proposer reorg. Default: 20%
LIGHTHOUSE_CLI_BN_PROPOSER_REORG_THRESHOLD=

# Prune blobs from Lighthouse's database when they are older than the data availability boundary relative to the current epoch. [default: true]
LIGHTHOUSE_CLI_BN_PRUNE_BLOBS=

# Prune execution payloads from Lighthouse's database. 
# This saves space but imposes load on the execution client, as payloads need to be reconstructed and sent to syncing peers. [default: true]
LIGHTHOUSE_CLI_BN_PRUNE_PAYLOADS=

# The UDP port that quic will listen on. Defaults to `port` + 1.
LIGHTHOUSE_CLI_BN_QUIC_PORT=

# The UDP port that quic will listen on over IPv6 if listening over both IPv4 and IPv6. Defaults to `port6` + 1.
LIGHTHOUSE_CLI_BN_QUIC_PORT6=

# Used to coordinate manual overrides of the SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY parameter. 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override this parameter 
# in the event of an attack at the PoS transition block. 
# Incorrect use of this flag can cause your node to possibly accept an invalid chain or sync more slowly. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY=

# Some HTTP API requests can be optimized by caching the shufflings at each epoch. 
# This flag allows the user to set the shuffling cache size in epochs. 
# Shufflings are dependent on validator count and setting this value to a large number can consume a large amount of memory.
LIGHTHOUSE_CLI_BN_SHUFFLING_CACHE_SIZE=

# Set the maximum number of attestation roots for the slasher to cache.
LIGHTHOUSE_CLI_BN_SLASHER_ATT_CACHE_SIZE=

# Set the database backend to be used by the slasher. [possible values: mdbx, lmdb, disabled]
LIGHTHOUSE_CLI_BN_SLASHER_BACKEND=

# Broadcast slashings found by the slasher to the rest of the network [Enabled by default]. [default: true]
LIGHTHOUSE_CLI_BN_SLASHER_BROADCAST=

# Number of epochs per validator per chunk stored on disk.
LIGHTHOUSE_CLI_BN_SLASHER_CHUNK_SIZE=

# Set the slasher's database directory.
LIGHTHOUSE_CLI_BN_SLASHER_DIR=

# Configure how many epochs of history the slasher keeps. Immutable after initialization.
LIGHTHOUSE_CLI_BN_SLASHER_HISTORY_LENGTH=

# Maximum size of the MDBX database used by the slasher.
LIGHTHOUSE_CLI_BN_SLASHER_MAX_DB_SIZE=

# Set the delay from the start of the slot at which the slasher should ingest attestations. 
# Only effective if the slasher-update-period is a multiple of the slot duration.
LIGHTHOUSE_CLI_BN_SLASHER_SLOT_OFFSET=

# Configure how often the slasher runs batch processing.
LIGHTHOUSE_CLI_BN_SLASHER_UPDATE_PERIOD=

# Number of validators per chunk stored on disk.
LIGHTHOUSE_CLI_BN_SLASHER_VALIDATOR_CHUNK_SIZE=

# Specifies how often a freezer DB restore point should be stored. 
# Cannot be changed after initialization. [default: 8192 (mainnet) or 64 (minimal)]
LIGHTHOUSE_CLI_BN_SLOTS_PER_RESTORE_POINT=

# Specifies the size of the snapshot cache. [default: 3]
LIGHTHOUSE_CLI_BN_STATE_CACHE_SIZE=

# Emergency fallback fee recipient for use in case the validator client does not have one configured. 
# You should set this flag on the validator client instead of (or in addition to) setting it here.
LIGHTHOUSE_CLI_BN_SUGGESTED_FEE_RECIPIENT=

# The target number of peers.
LIGHTHOUSE_CLI_BN_TARGET_PEERS=

# Used to coordinate manual overrides to the TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH parameter. 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override the terminal PoW block. 
# Incorrect use of this flag will cause your node to experience a consensus failure. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_TERMINAL_BLOCK_HASH_EPOCH_OVERRIDE=

# Used to coordinate manual overrides to the TERMINAL_BLOCK_HASH parameter. 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override the terminal PoW block. 
# Incorrect use of this flag will cause your node to experience a consensus failure. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_TERMINAL_BLOCK_HASH_OVERRIDE=

# Used to coordinate manual overrides to the TERMINAL_TOTAL_DIFFICULTY parameter. Accepts a 256-bit decimal integer (not a hex value). 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override the terminal difficulty. 
# Incorrect use of this flag will cause your node to experience a consensus failure. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_TERMINAL_TOTAL_DIFFICULTY_OVERRIDE=

# Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. 
# Only effective if there is no existing database.
LIGHTHOUSE_CLI_BN_TESTNET_DIR=

# One or more comma-delimited trusted peer ids which always have the highest score according to the peer scoring system.
LIGHTHOUSE_CLI_BN_TRUSTED_PEERS=

# Path to a json file containing the trusted setup params. 
# NOTE: This will override the trusted setup that is generated from the mainnet kzg ceremony. Use with caution.
LIGHTHOUSE_CLI_BN_TRUSTED_SETUP_FILE_OVERRIDE=

# As per --validator-monitor-pubkeys, but the comma-separated list is contained within a file at the given path.
LIGHTHOUSE_CLI_BN_VALIDATOR_MONITOR_FILE=

# Once the validator monitor reaches this number of local validators it will stop collecting per-validator Prometheus metrics and issuing per-validator logs. 
# Instead, it will provide aggregate metrics and logs. This avoids infeasibly high cardinality in the Prometheus database and high log volume when using many validators. Defaults to 64.
LIGHTHOUSE_CLI_BN_VALIDATOR_MONITOR_INDIVIDUAL_TRACKING_THRESHOLD=

# A comma-separated list of 0x-prefixed validator public keys. These validators will receive special monitoring and additional logging.
LIGHTHOUSE_CLI_BN_VALIDATOR_MONITOR_PUBKEYS=

# Specify a weak subjectivity checkpoint in `block_root:epoch` format to verify the node's sync against. 
# The block root should be 0x-prefixed. Note that this flag is for verification only, to perform a checkpoint sync from a recent state use --checkpoint-sync-url.
LIGHTHOUSE_CLI_BN_WSS_CHECKPOINT=
